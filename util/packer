#!/usr/bin/env perl
#
# packer - pack PerlPowerTools as single executable
#
# Notes :
# - See usage hereafter for general information.
# - Currently only Windows is supported.
# - Not tested with Active Perl.
# - Not sure if symbolic links really work.
# - For correctness, $0 should be set to $file (full path) instead of $tool (basename) and
#   any display issue should be fixed in the tools themselves. Currently, we avoid very ugly
#   usage/warning/error messages (some tools use raw $0). If the tools need to find their
#   own path, then __FILE__ must be used (not $0 or any module using it).
# - Patch for modulinos : run() if !caller() || caller(0) =~ /^(PerlPowerTools::Packed|PAR)$/ || caller(1) eq 'PAR';
#
# 2024.03.22 v1.33 jul : https://github.com/briandfoy/PerlPowerTools/pull/509
#                        - added package PerlPowerTools::Packed for modulinos
# 2022.06.01 v1.32 jul : - fixed chdir in bin/perlpowertools
#                        - added pwd tests in t/perlpowertools.t
# 2022.05.31 v1.31 jul : - fixed broken script ($ not escaped in usage)
#                        - patched modulinos (date, echo, factor, glob, units)
# 2022.04.08 v1.30 jul : - fixed win32 quoting issue
#                        - cleanup and simplification
# 2022.04.01 v1.22 jul : - helper script standalone, dynamic tools list and version
#                        - include perldoc.pod when packing core modules (executable or pp -B)
#                        - fixed issue with #line 2 directive (#syntax error ... near "if 0")
# 2022.01.31 v1.21 jul : better documentation
# 2021.10.22 v1.20 jul : - fixed incorrect tools usage message by setting $0 
#                        - in packed file and helper script : set shebang to #!/usr/bin/env perl
#                        - in packed file : delete "#line 2" directive (line number and file name)
#                        - helper script now in /bin, not deleted anymore, works when packed or not
# 2021.05.31 v1.10 jul : fixed spaces in paths and "The command line is too long" (win32)
# 2021.05.22 v1.00 jul : initial

=begin metadata

Name: packer
Description: pack PerlPowerTools as single executable
Author: jul, kaldor@cpan.org
License: Artistic License 2.0

=end metadata

=cut

use strict;
use warnings;
use utf8;
use Getopt::Std;
use File::Basename;
use File::Glob ':bsd_glob';
use Cwd 'abs_path';
my $ppt_dir;
BEGIN { $ppt_dir = dirname(abs_path($0)) . '/..' };
use lib $ppt_dir . '/lib';
use if $^O eq "MSWin32", 'Win32::ShellQuote';
use PAR::Packer;

our $VERSION = '1.33';
my $program  = 'packer';
my $usage    = <<EOF;

Usage: $program [-hV]

    -h, --help      help
    -V, --version   version

This script bundles the PerlPowerTools as a single standalone Windows executable
(no dependencies) and generates 'packed/perlpowertools.exe'.

As BusyBox, if the executable is renamed / hardlinked / symlinked as one of the
tools, it will behave as that tool automatically. The executable MUST be called
'perlpowertools.exe' or 'one-of-the-tools.exe', otherwise PAR won't know what to
run.

How to call the tools :
    \$ bin/cat
    \$ bin/perlpowertools cat
    \$ packed/perlpowertools.exe cat
    \$ packed/cat.exe

How to read the documentation :
    \$ bin/perldoc cat
    \$ bin/perlpowertools perldoc cat
    \$ packed/perlpowertools.exe perldoc perlpowertools
    \$ packed/perlpowertools.exe perldoc perldoc
EOF

# options
$Getopt::Std::STANDARD_HELP_VERSION = 1;
my %options = ();
getopts("hV", \%options) or die $usage;

my $help        = $options{h} || 0;
my $version     = $options{V} || 0;

die $usage if $help;
die $VERSION . "\n" if $version;
die "platform not supported\n" if $^O ne "MSWin32";

########
# MAIN #
########

chdir $ppt_dir;

my @tools = glob("bin/*");

# disable PodStrip filter
$ENV{PAR_VERBATIM} = 1; 

# apply PodStrip but keep PerlPowerTools doc
my $podstrip = 'PodStrip=(?<!PerlPowerTools.pm)$';
$podstrip = Win32::ShellQuote::quote_system($podstrip);

# find perldoc's own pod
my $podfile = qx(perldoc -l perldoc.pod);
die "cannot find perldoc.pod" if $?;
chomp($podfile);
my $packedpodfile = basename($podfile);

# build packed executable
system(
    "pp",
    "-v",
    "-I", "lib",                        # include PerlPowerTools.pm, used by helper script for $VERSION
    "-F", $podstrip,                    # apply PodStrip but keep PerlPowerTools doc
    "-a", "$podfile;$packedpodfile",	# include perldoc doc
    "-o", "$ppt_dir/packed/perlpowertools.exe",
    @tools
) == 0 or die "system failed: $?";

exit 1;
