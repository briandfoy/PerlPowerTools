#!/usr/bin/perl

=begin metadata

Name: moo
Description: play a game of MOO
Author: Abigail, perlpowertools@abigail.be
License: perl

=end metadata

=cut

use strict;

use List::Util qw(shuffle);

my ($VERSION) = '1.4';

sub usage {
    die "usage: moo [size]\n";
}

sub get_secret {
    my $size = shift;

    my $i = $size - 1;
    my %digits = map { $_ => 1 } (0 .. 9);
    my @s1 = keys %digits;
    my @s2 = shuffle(@s1);
    return @s2[0 .. $i];
}

sub has_dupe {
    my $guess = shift;
    my %chars;
    foreach my $c (split //, $guess) {
        return 1 if exists $chars{$c};
        $chars{$c} = 1;
    }
    return 0;
}

my $size = shift;
$size = 4 unless defined $size;
usage() if $size !~ m/\A[0-9]+\Z/ or !$size;
die "secret size must be within range: 1-10\n" if $size > 10;
usage() if @ARGV;

print "MOO\n";
{
    my @secret = get_secret($size);
    my @secret_by_value = (0) x 10;
    foreach my $i (@secret) {
        $secret_by_value[$i] = 1;
    }

    my $attempts = 0;

    print "New game\n";

    {
        print "Your guess? ";
        chomp (my $guess = <>);
        exit if (!defined($guess) || $guess =~ m/\Aq/i);

        if ($guess =~ /\D/ || length $guess != $size || has_dupe($guess)) {
            print "Bad guess\n";
            redo
        }

        ++ $attempts;

        my @guess = split // => $guess;

        # Count the number of bulls and cows. We need a copy of
        # @secret_by_value for that.
        my $bulls = 0;
        my $cows  = 0;
        my @cows  = @secret_by_value;

        # We have to count the bulls before counting the cows.
        for (my $i = 0; $i < @guess; $i ++) {
            if ($secret [$i] == $guess [$i]) {
                $bulls ++;
                $cows [$guess [$i]] -- if $cows [$guess [$i]];
            }
        }

        for (my $i = 0; $i < @guess; $i ++) {
            next if $secret [$i] == $guess [$i]; # Counted the bulls already.
            if ($cows [$guess [$i]]) {
                $cows [$guess [$i]] --;
                $cows ++;
            }
        }

        print "Bulls = $bulls\tCows = $cows\n";

        if ($bulls == $size) {
            # Won the game!
            print "Attempts = $attempts\n";
            last;
        }

        redo;
    }

    redo;
}

__END__

=pod

=head1 NAME

moo - play a game of MOO

=head1 SYNOPSIS

moo [size]

=head1 DESCRIPTION

I<moo> is a game where the user guesses a random number chosen by
the computer. By default, the computer takes a number of four distinct digits
(including 0's), but that can be changed by giving I<moo> the number of
digits to take.  After each guess, the number of B<bull>s and B<cow>s
is displayed.  A B<bull> is a correctly guessed digit, in the right
place, while a B<cow> is a correct digit, not in the right place. Once
a game has finished because all the digits have been guessed correctly,
a new game will be started. Exiting the program can be done by typing
'q' or 'Q' on a guess, or hitting the interrupt key (usually control-C).

=head2 OPTIONS

The only option I<moo> takes is optional, and is the number of digits to
use for the number to guess.

=head1 ENVIRONMENT

The working of I<moo> is not influenced by any environment variables.

=head1 BUGS

I<moo> does not have any known bugs.

=head1 AUTHOR

The Perl implementation of I<moo> was written by Abigail, I<perlpowertools@abigail.be>.

=head1 COPYRIGHT and LICENSE

This program is copyright by Abigail 1999.

This program is free and open software. You may use, copy, modify, distribute
and sell this program (and any modified variants) in any way you wish,
provided you do not restrict others to do the same.

=cut

