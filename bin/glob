#!/usr/bin/perl

=begin metadata

Name: glob
Description: find pathnames matching a pattern
Author: Marc Mengel, mengel@fnal.gov
Author: brian d foy, briandfoy@pobox.com
License: perl

=end metadata

=cut

our $VERSION = '2.1';

use constant EX_SUCCESS => 0;
use constant EX_FAILURE => 1;

use File::Glob qw(csh_glob);

my $separator = "\n";
if( $ARGV[0] eq '-0' ) {
	shift @ARGV;
	$separator = "\0";
	}

my $pattern = "@ARGV";

my @matches = csh_glob( $pattern );

if( @matches ) {
	print join $separator, @matches;
	exit EX_SUCCESS;
	}

my $message = do {
	if( $pattern =~ /(?:\A|\s)~([\w-]+?)\b/ ) {
		my $u = $1;
		my $m = "Unknown user $u.";

		if( $^O =~ /\A MSWin32 \z/x ) {
			local $_ = `net user $u`;
			/could not be found|The syntax of this command/ ? $m : ();
			}
		elsif( ! getpwnam($u) ) {
			$m
			}
		else { undef }
		}
	elsif( $pattern =~ /[*?\[]/ ) {
		"No Match";
		}
	else { undef }
	};

print STDERR $message if defined $message;
exit EX_FAILURE;

=head1 NAME

glob - output pathnames matching a pattern

=head1 SYNOPSIS

On the command-line:

    glob 'eenie{meenie,mynie,moe}*.[ch]'

=head1 DESCRIPTION

When this program was originally created, *perl* did not have a builtin
C<glob> feature and would rely on the *csh* to do the work for it. With
Perl v5.6 in March 2000, the L<File::Glob> module has done that work
without interacting with *csh*.

=head2 Pattern Matching Syntax for Filename Expansion

The expressions that are passed as arguments to B<glob> must adhere to
csh/tcsh pattern-matching syntax for wildcard filename expansion (also
known as I<globbing>). Unquoted words containing an asterisk (C<*>),
question-mark (C<?>), square-brackets (C<[...]>), or curly-braces (C<{...}>), or
beginning with a tilde (~), are expanded into an alphabetically sorted
list of filenames, as follows:

=over 5

=item C<*>

Match any (zero or more) characters.

=item C<?>

Match any single character.

=item [...]

Match any single character in the given character class. The character
class is the enclosed list(s) or range(s). A list is a string of
characters. A range is two characters separated by a dash (-), and
includes all the characters in between the two characters given
(inclusive). If a dash (C<->) is intended to be part of the character
class it must be the first character given.

=item {str1,str2,...}

Expand the given "word-set" to each string (or filename-matching
pattern) in the comma-separated list. Unlike the pattern-matching
expressions above, the expansion of this construct is not sorted. For
instance, C<{foo,bar}> expands to C<foo bar> (not C<bar foo>). As
special cases, unmatched C<{> and C<}>, and the "empty set" (the string
{}) are treated as ordinary characters instead of pattern-matching
meta-characters. A backslash (C<\)> may be used to escape an opening or
closing curly brace, or the backslash character itself. Note that
word-sets I<may> be nested!

=item C<~>

The home directory of the invoking user as indicated by the value of
the variable C<$HOME>.

=item ~username

The home directory of the user whose login name is 'username',
as indicated by the password entry for the named user.

=back

Only the patterns *, ? and [...] imply pattern matching; an error
results if no filename matches a pattern that contains them. When
a period or "dot" (.) is the first character in a filename or
pathname component, it must be matched explicitly. The filename
component separator character (e.g., / or slash) must also
be matched explicitly.

=head1 OPTIONS

When the first argument is B<-0> (a minus sign followed by the number
zero), then a NUL character ("\0") is used to separate the expanded
words and/or filenames when printing them to standard output.
Otherwise a newline is used as the word/filename output separator.

=head1 RETURNS

When B<glob> is invoked as a script from the command-line, the exit-status
returned will be 0 if any files were matched or word-sets were expanded;
1 if no files/word-sets were matched/expanded; and 2 if some other kind of
error occurred.

=head1 DIAGNOSTICS

If no filenames are matched and pattern-matching characters were used
(C<*>, C<?>, or C<[...]>), then an error message of "No Match" is issued. If a
user's home directory is specified using tilde-expansion (e.g., C<~username>)
but the corresponding username or their home directory cannot be found,
then the error message "Unknown user: username" is issued.

=head1 COPYRIGHT

Copyright (c) 1997-2025 Marc Mengel. All rights reserved.

This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=head1 AUTHOR

Marc Mengel E<lt>F<mengel@fnal.gov>E<gt>

=head1 REVISIONS

=over 4

=item brian f foy E<lt>F<briandfoy@pobox.com>E<gt> - v2.1 February 2025

Reimplement this as a thin layer over L<File::Glob::csh_glob>. This
program was written before that was a core module, but had several
edge cases where it would crash.

=item Brad Appleton E<lt>F<bradapp@enteract.com>E<gt> - v1.2 March 1999

Modified to use qr// (and some other minor speedups), to explode
subexpressions in curly braces (a la csh -- rather than using just
plain alternation), and made callable as a standalone script.

=back

=cut

