#!/usr/bin/perl

=begin metadata

Name: units
Description: conversion program
Author: Mark-Jason Dominus, mjd-perl-units@plover.com
License: GNU GPL

=end metadata

=cut


#     units: convert units of measurement
#     Copyright (C) 1996,1999 M-J. Dominus (mjd-perl-units@plover.com)
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version, or under Perl's `Artistic License'.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

use Config;

# Usage:
# units [-f unittab]
$VERSION = '1.01';

# $DEBUG_p = 1;
# $DEBUG_o = 1;
# $DEBUG_l = 1;
my %unittab;			# Definitions loaded here
@DEFAULT_UNITTABS = ('/usr/lib/unittab');

# Metric prefixes.  These must be powers of ten or change the
# token_value subroutine
BEGIN {
  %PREF = (yotta => -24,
	   zetta => -21,
	   atto => -18,
	   femto => -15,
	   pico => -12,
	   nano => -9,
	   micro => -6,
#	      u => -6,
	   milli => -3,
	   centi => -2,
	   deci => -1,
	   deca => 1,
	   deka => 1,
	   hecto => 2,
	   hect => 2,
	   kilo => 3,
	   myria => 4,
	   mega => 6,
	   giga => 9,
	   tera => 12,
	   zepto => 15,
	   yocto => 18,
	  );
  $PREF = join '|', sort {$PREF{$a} <=> $PREF{$b}} (keys %PREF);
}


################################################################
#
# Main program here
#
################################################################

# $definitions = '-';
while ($ARGV[0] =~ /^-/) {
  my $flag = shift;
  if ($flag =~ /^-(f|-file)?$/) {
    push @UNITTABS, shift;
  } elsif ($flag =~ /^-(W|-warranty)$/) {
    WARRANTY();
    exit 0;
  } elsif ($flag =~ /^-(C|-copying)$/) {
    COPYING();
    exit 0;
  } elsif ($flag =~ /^--version$/) {
    print "perl units version $VERSION.\n";
    exit 0;
  } else {
    warn "Unknown flag: $flag.\n";
    $USAGE++;
  }
}
usage() if $USAGE || @ARGV;

@UNITTABS = split /$Config{path_sep}/, $ENV{UNITTAB} unless @UNITTABS;
@UNITTABS = @DEFAULT_UNITTABS unless @UNITTABS;
for (@UNITTABS) {
  read_defs($_);
}
for (;;) {
  print "You have: ";
  my $have = <>;
  trim($have);
  if ($have =~ s/^\s*\#\s*//) {
    if (definition_line($have)) {
      print "Defined.\n";
    } else {
      print "Error: $PARSE_ERROR.\n";
    }
    next;
  }
  exit 0 unless $have =~ /\S/;
  my $hu = parse_unit($have);
  if (is_Zero($hu)) {
    print $PARSE_ERROR, "\n";
    redo;
  }
  my $wu;
  my $want;
  for (;;) {
    print "You want: ";
    $want = <>;
    trim($want);
    redo unless $want =~ /\S/;
    $wu = parse_unit($want);
    if (is_Zero($wu)) {
      print $PARSE_ERROR, "\n";
    } else {
      last;
    }
  }
  my $quot = unit_divide($hu, $wu);
  if (is_dimensionless($quot)) {
    my $q = $quot->{_};
    my $p = 1/$q;
    printf "\t* %.6g\n\t/ %.6g\n", $q, $p;
  } else {
    print
      "conformability (Not the same dimension)\n",
      "\t", $have, " is ", text_unit($hu), "\n",
      "\t", $want, " is ", text_unit($wu), "\n",
      ;
  }
}


################################################################

sub usage {
  print STDERR <<EOM;
 Usage: $0 [-f definition-file] [option]...

valid options are:

        -? --help         display this help text
        -f --file         use specified definition file instead of
                          @DEFAULT_UNITTABS
        -W --warranty     display information about (lack of) warranty
        -C --copying      display information about license
           --version      display version information

Report bugs to mjd-perl-units\@plover.com.
EOM
  exit 1;
}

sub read_defs {
  my ($file) = @_;
  open D, $file
    or die "Couldn't read definitions from from `$file': $!; aborting";
  while (<D>) {
    s/\#.*$//;
    trim($_);
    next unless /\S/;

    print ">>> $_\n" if $DEBUG_d;
    my $r = definition_line($_);
    unless (defined $r) {
      warn "Error in line $. of $file: $PARSE_ERROR.  Skipping.\n";
    }
  }
}

sub definition_line {
  my ($line) = @_;
  my ($name, $data) = split /\s+/, $line, 2;
  my $value = parse_unit($data);
  if (is_Zero($value)) {
    return;
  }
  if (is_fundamental($value)) {
    return $unittab{$name} = {_ => 1, $name => 1};
  } else {
    return $unittab{$name} = $value;
  }
}

sub trim {
  $_[0] =~ s/\s+$//;
  $_[0] =~ s/^\s+//;
}

sub Zero () { +{ _ => 0 } }

sub is_Zero {
  $_[0]{_} == 0;
}

sub unit_lookup {
  my ($name) = @_;
  print STDERR "Looking up unit `$name'\n" if $DEBUG_l;
  return $unittab{$name} if exists $unittab{$name};
  if ($name =~ /s$/) {
    my $shortname = $name;
    $shortname =~ s/s$//;
    return $unittab{$shortname} if exists $unittab{$shortname};
  }
  my ($prefix, $rest) = ($name =~ /^($PREF-?)(.*)/o);
  unless ($prefix) {
    $PARSE_ERROR = "Unknown unit `$name'";
    return Zero;
  }
  my $base_unit = unit_lookup($rest); # Recursive
  con_multiply($base_unit, 10**$PREF{$prefix});
}

sub unit_multiply {
  my ($a, $b) = @_;
  print STDERR "Multiplying @{[%$a]} by @{[%$b]}: \n" if $DEBUG_o;
  my $r = {%$a};
  $r->{_} *= $b->{_};
  for my $u (keys %$b) {
    next if $u eq '_';
    $r->{$u} += $b->{$u};
  }
  print STDERR "\tResult: @{[%$r]}\n" if $DEBUG_o;
  $r;
}

sub unit_divide {
  my ($a, $b) = @_;
  die "Division by zero error" if $b->{_} == 0;
  my $r = {%$a};
  $r->{_} /= $b->{_};
  for my $u (keys %$b) {
    next if $u eq '_';
    $r->{$u} -= $b->{$u};
  }
  $r;
}

sub unit_power {
  my ($p, $u) = @_;
  print STDERR "Raising unit @{[%$u]} to power $p.\n" if $DEBUG_o;
  my $r = {%$u};
  $r->{_} **= $p;
  for my $d (keys %$r) {
    next if $d eq '_';
    $r->{$d} *= $p;
  }
  print STDERR "\tResult: @{[%$r]}\n" if $DEBUG_o;
  $r;
}

sub unit_dimensionless {
  print "Turning $_[0] into a dimensionless unit.\n" if $DEBUG_o;
  return +{_ => $_[0]};
}

sub con_multiply {
  my ($u, $c) = @_;
  print STDERR "Multiplying unit @{[%$u]} by constant $c.\n" if $DEBUG_o;
  my $r = {%$u};
  $r->{_} *= $c;
  print STDERR "\tResult: @{[%$r]}\n" if $DEBUG_o;
  $r;
}

sub is_dimensionless {
  my ($r) = @_;
  for my $u (keys %$r) {
    next if $u eq '_';
    return if $r->{$u} != 0;
  }
  return 1;
}

# Generate bogus unit value that signals that a new fundamental unit
# is being defined
sub new_fundamental_unit {
  return +{__ => 'new', _ => 1};
}

# Recognize this  bogus value when it appears again.
sub is_fundamental {
  exists $_[0]{__};
}

sub text_unit {
  my ($u) = @_;
  my (@pos, @neg);
  my $c = $u->{_};
  for my $k (sort keys %$u) {
    next if $k eq '_';
    push @pos, $k if $u->{$k} > 0;
    push @neg, $k if $u->{$k} < 0;
  }
  my $text = ($c == 1 ? '' : $c);
  for my $d (@pos) {
    my $e = $u->{$d};
    $text .= " $d";
    $text .= "^$e" if $e > 1;
  }

  $text .= ' per' if @neg;
  for my $d (@neg) {
    my $e = - $u->{$d};
    $text .= " $d";
    $text .= "^$e" if $e > 1;
  }

  $text;
}
################################################################
#
# I'm the parser
#

BEGIN {
  sub sh { ['shift', $_[0]]  };
  sub go { ['goto', $_[0]] };
  @actions =
    (
     # Initial state
     {PREFIX => sh(1),
      NUMBER => sh(2),
      NAME   => sh(3),
      FUNDAMENTAL => sh(4),
      FRACTION => sh(5),
      '(' => sh(6),
      'unit' => go(7),
      'topunit' => go(17),
      'constant' => go(8),
     },
     # State 1:   constant -> PREFIX .
     { _ => ['reduce', 1, 'constant']},
     # State 2:   constant -> NUMBER .
     { _ => ['reduce', 1, 'constant']},
     # State 3:   unit -> NAME .
     { _ => ['reduce', 1, 'unit', \&unit_lookup ]},
     # State 4:   unit -> FUNDAMENTAL .
     { _ => ['reduce', 1, 'unit', \&new_fundamental_unit ]},
     # State 5:   constant -> FRACTION .
     { _ => ['reduce', 1, 'constant']},
     # State 6:   unit -> '(' . unit ')'
     {PREFIX => sh(1),
      NUMBER => sh(2),
      NAME   => sh(3),
      FUNDAMENTAL => sh(4),
      FRACTION => sh(5),
      '(' => sh(6),
      'unit' => go(9),
      'constant' => go(8),
     },
     # State 7:   topunit -> unit .
     #            unit  ->  unit . TIMES unit
     #            unit  ->  unit . DIVIDE unit
     #            unit  ->  unit . NUMBER
     {NUMBER => sh(10),
      TIMES => sh(11),
      DIVIDE => sh(12),
      _ =>  ['reduce', 1, 'topunit'],
     },
     # State 8:   unit -> constant . unit
     #            unit -> constant .
     {PREFIX => sh(1),
      NUMBER => sh(2), # Shift-reduce conflict resolved in favor of shift
      NAME   => sh(3),
      FUNDAMENTAL => sh(4),
      FRACTION => sh(5),
      '(' => sh(6),
      _ =>   ['reduce', 1, 'unit', \&unit_dimensionless],
      'unit' => go(13),
      'constant' => go(8),
     },
     # State 9:   unit -> unit . TIMES unit
     #            unit -> unit . DIVIDE unit
     #            unit -> '(' unit . ')'
     #            unit -> unit . NUMBER
     {NUMBER => sh(10),
      TIMES => sh(11),
      DIVIDE => sh(12),
      ')' => sh(14),
     },
     # State 10:  unit -> unit NUMBER .
     { _ => ['reduce', 2, 'unit',
	     sub {
	       unless (int($_[1]) == $_[1]) {
		 ABORT("Nonintegral power $_[1]");
		 return Zero;
	       }
	       unit_power(@_);
	     }
	    ],
     },
     # State 11:  unit -> unit TIMES . unit
     {PREFIX => sh(1),
      NUMBER => sh(2),
      NAME   => sh(3),
      FUNDAMENTAL => sh(4),
      FRACTION => sh(5),
      '(' => sh(6),
      'unit' => go(15),
      'constant' => go(8),
     },
     # State 12:  unit -> unit DIVIDE . unit
     {PREFIX => sh(1),
      NUMBER => sh(2),
      NAME   => sh(3),
      FUNDAMENTAL => sh(4),
      FRACTION => sh(5),
      '(' => sh(6),
      'unit' => go(16),
      'constant' => go(8),
     },
     # State 13:  unit -> unit . TIMES unit
     #            unit -> unit . DIVIDE unit
     #            unit -> constant unit .
     #            unit -> unit . NUMBER
     {NUMBER => sh(10), # Shift-reduce conflict resolved in favor of shift
      TIMES => sh(11),  # Shift-reduce conflict resolved in favor of shift
      DIVIDE => sh(12), # Shift-reduce conflict resolved in favor of shift
      _ => ['reduce', 2, 'unit', \&con_multiply],
     },
     # State 14: unit => '(' unit ')' .
     { _ => ['reduce', 3, 'unit', sub {$_[1]}] },
     # State 15: unit  ->  unit . TIMES unit
     #           unit  ->  unit TIMES unit .
     #           unit  ->  unit . DIVIDE unit
     #           unit  ->  unit . NUMBER
     {NUMBER => sh(10), # Shift-reduce conflict resolved in favor of shift
      _ => ['reduce', 3, 'unit', sub {unit_multiply($_[0], $_[2])}],
     },
     # State 16: unit  ->  unit . TIMES unit
     #           unit  ->  unit DIVIDE unit .
     #           unit  ->  unit . DIVIDE unit
     #           unit  ->  unit . NUMBER
     {NUMBER => sh(10), # Shift-reduce conflict resolved in favor of shift
      _ => ['reduce', 3, 'unit', sub{unit_divide($_[2], $_[0])}],
     },
     # State 17: Finishing path
     {EOF => go(18),},
     # State 18: Final state
     {_ => ['accept']},
    );
}

sub ABORT {
  $PARSE_ERROR = shift;
}

sub parse_unit {
  my ($s) = @_;
  my $tokens = lex($s);
  my $STATE = 0;
  my (@state_st, @val_st);

  $PARSE_ERROR = undef;

  # Now let's run the parser
  for (;;) {
    return Zero if $PARSE_ERROR;
    my $la = @$tokens ? token_type($tokens->[0]) : 'EOF';
    print STDERR "Now in state $STATE.  Lookahead type is $la.\n" if $DEBUG_p;
    print STDERR "State stack is (@state_st).\n" if $DEBUG_p;
    my $actiontab = $actions[$STATE];
    my $action = $actiontab->{$la} || $actiontab->{_};
    unless ($action) {
      $PARSE_ERROR = 'Syntax error';
      return Zero;
    }

    my ($primary, @actargs) = @$action;
    print STDERR "  $primary (@actargs)\n" if $DEBUG_p;
    if ($primary eq 'accept') {
      return $val_st[0];	# Success!
    } elsif ($primary eq 'shift') {
      my $token = shift @$tokens;
      my $val = token_value($token);
      push @val_st, $val;
      push @state_st, $STATE;
      $STATE = $actargs[0];
    } elsif ($primary eq 'goto') {
      $STATE = $actargs[0];
    } elsif ($primary eq 'reduce') {
      my ($n_args, $result_type, $semantic) = @actargs;
      my @arglist;
#      push @state_st, 'FAKE';	# So that we only really remove n-1 states
      while ($n_args--) {
	push @arglist, pop @val_st;
	$STATE = pop @state_st;
      }
      my $result = $semantic ? &$semantic(@arglist) : $arglist[0];
      push @val_st, $result;
      push @state_st, $STATE;
#      $STATE = $state_st[-1];
      print STDERR "Post-reduction state is $STATE.\n" if $DEBUG_p;

      # Now look for `goto' actions
      my $goto = $actions[$STATE]{$result_type};
      unless ($goto && $goto->[0] eq 'goto') {
	die "No post-reduction goto in state $STATE for $result_type.\n";
      }
      print STDERR "goto $goto->[1]\n" if $DEBUG_p;
      $STATE = $goto->[1];
    } else {
      die "Bad primary $primary";
    }
  }
}


sub lex {
  my ($s) = @_;
  my @t = split /(
                   \*{3}        # Special `new unit' symbol
                |  [()*-]	# Symbol
                |  \s*(?:\/|\bper\b)\s*      # Division
	        |  \d*\.\d+(?:[eE]-?\d+)? # Decimal number
                |  \d+\|\d+     # Fraction
                |  \d+          # Integer
#                |  (?:$PREF)-?  # Prefix (handle differently)
		|  [A-Za-z_][A-Za-z_.]* # identifier
	        |  \s+		# White space
                )/ox, $s;
  @t = grep {$_ ne ''} @t;	# Discard empty and all-white tokens
  \@t;
}

sub token_type {
  my ($token) = @_;
  return $token->[0] if ref $token;
  return $token if $token =~ /[()]/;
  return TIMES if $token =~ /^\s+$/;
  return FUNDAMENTAL if $token eq '***';
  return DIVIDE if $token =~ /^\s*(\/|\bper\b)\s*$/;
  return TIMES if $token eq '*' || $token eq '-';
  return FRACTION if $token =~ /^\d+\|\d+$/;
  return NUMBER if $token =~ /^[.\d]/;
#  return PREFIX if $token =~ /^$PREF/o;
  return NAME;
}

sub token_value {
  my ($token) = @_;
  return $token if $token =~ /^([()*\/-]|\s*\bper\b\s*)$/;
  if ($token =~ /(\d+)\|(\d+)/) {
    if ($2 == 0) {
      ABORT("Zero denominator in fraction `$token'");
      return 0;
    }
    return $1/$2;
#  } elsif ($token =~ /$PREF/o) {
#    $token =~ s/-$//;
#    return 10**($PREF{$token});
  }
  return $token;		# Perl takes care of the others.
}

sub WARRANTY {
  print <<EOM
  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
EOM
}

sub COPYING {
  print <<EOM;
		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                          675 Mass Ave, Cambridge, MA 02139, USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

EOM

  WARRANTY();
  1;
}

=encoding utf8

=head1 NAME

units - conversion program

=head1 SYNOPSIS

    units [-f filename]

=head1 OPTIONS

    -? --help       Display help text
    -f --file       Use specified definition file
    -W --warranty   Display information about (lack of) warranty
    -C --copying    Display license information
       --version    Display version information

=head1 DESCRIPTION

The units program converts quantities expressed in various scales to their
equivalents in other scales.  The units program can only handle multiplicative
or affine scale changes.  It works interactively by prompting the user for
input:

    You have: meters
    You want: feet
        * 3.2808399
        / 0.3048

    You have: cm^3
    You want: gallons
        * 0.00026417205
        / 3785.4118

    You have: meters/s
    You want: furlongs/fortnight
        * 6012.8848
        / 0.00016630952

    You have: 1|2 inch
    You want: cm
        * 1.27
        / 0.78740157

    You have: 85 degF
    You want: degC
        29.444444

Powers of units can be specified using the '^' character as shown in the
example, or by simple concatenation: 'cm3' is equivalent to 'cm^3'.
Multiplication of units can be specified by using spaces, a dash or an
asterisk.  Division of units is indicated by the slash ('/').  Note that
multiplication has a higher precedence than division, so 'm/s/s' is the same as
'm/s^2' or 'm/s s'.  Division of numbers must be indicated using the vertical
bar ('|').  To convert half a meter, you would write '1|2 meter'.  If you write
'1/2 meter' then the units program would interpret that as equivalent to
'0.5/meter'.  If you enter incompatible unit types, the units program will
print a message indicating that the units are not conformable and it will
display the reduced form for each unit:

    You have: ergs/hour
    You want: fathoms kg^2 / day
    conformability error
         2.7777778e-11 kg m^2 / sec^3
         2.1166667e-05 kg^2 m / sec

The conversion information is read from a units data file.  The default file
includes definitions for most familiar units, abbreviations and metric
prefixes.  Some constants of nature included are:

    pi         ratio of circumference to diameter
    c          speed of light
    e          charge on an electron
    g          acceleration of gravity
    force      same as g
    mole       Avogadro's number
    water      pressure per unit height of water
    mercury    pressure per unit height of mercury
    au         astronomical unit

The unit 'pound' is a unit of mass.  Compound names are run together so 'pound
force' is a unit of force.  The unit 'ounce' is also a unit of mass.  The fluid
ounce is 'floz'.  British units that differ from their US counterparts are
prefixed with 'br', and currency is prefixed with its country name:
'belgiumfranc', 'britainpound'.  When searching for a unit, if the specified
string does not appear exactly as a unit name, then units will try to remove a
trailing 's' or a trailing 'es' and check again for a match.

To find out what units are available read the standard units file.  If you want
to add your own units you can supply your own file.  A unit is specified on a
single line by giving its name and an equivalence.  Be careful to define new
units in terms of old ones so that a reduction leads to the primitive units
which are marked with '!' characters.  The units program will not detect
infinite loops that could be caused by careless unit definitions.  Comments in
the unit definition file begin with a '/' character at the beginning of a line.

Prefixes are defined in the same was as standard units, but with a
trailing dash at the end of the prefix name.  If a unit is not found even
after removing trailing 's' or 'es', then it will be checked against the
list of prefixes.  Prefixes will be removed until a legal base unit is
identified.

Here is an example of a short units file that defines some basic units.

    m         !a!
    sec       !b!
    micro-    1e-6
    minute    60 sec
    hour      60 min
    inch      0.0254 m
    ft        12 inches
    mile      5280 ft

=head1 AUTHOR

Mark-Jason Dominus, C<< <mjd-perl-units@plover.com> >>

=head1 BUGS

=over 4

=item *

None noted.

=back

=head1 COPYRIGHT and LICENSE

This program is copyright (c) M-J. Dominus (1996, 1999).

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version, or under Perl's `Artistic License'.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

