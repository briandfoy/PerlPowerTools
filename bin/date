#!/usr/bin/perl
use strict;

=begin metadata

Name: date
Description: display or set date and time
Author: brian d foy, brian.d.foy@gmail.com
Author: Joshua Gross
License: artistic2

=end metadata

=cut

use POSIX;

my $VERSION = '1.0.3';

my $format = "%a %b %e %T %Z %Y";

BEGIN {
my @times = CORE::localtime;
sub core_time { @times }
}

foreach (@ARGV) {
    chomp;
       if( /^\-u/ ) { $ENV{'TZ'} = 'UTC'; my @times = CORE::gmtime; *core_time = sub { @times } }
    elsif( /^\+/  ) { ($format = $_) =~ s/(^\+)// }
    else {
        usage("$_ is not supported in this version.\n");
        }
    }

my %formats = (
	'e' => sprintf( '% 2d', (core_time)[3] ),
    'P' => lc( ( core_time() )[2] >= 12 ? "PM" : "AM" ),
    'q' => quarter(),
    'T' => sprintf( '%02d:%02d:%02d', (core_time)[2,1,0] ),
    'Z' => munge_tz(),
);

my @POSIX = qw(
    a A b B c C d D F g G h H I j k l m M
    n p r R s S t u U V w W x X y Y z
    );
@formats{ @POSIX } = map { POSIX::strftime( "%$_", core_time() ) } @POSIX;

$format =~ s/%(.)/ exists $formats{$1} ? $formats{$1} : "%$1" /eg;
print $format, "\n";

sub munge_tz {
	return 'UTC' if $ENV{TZ} eq 'UTC';
	my $from_posix = POSIX::strftime( '%Z', core_time() );
	return $from_posix if $from_posix =~ m/\A[A-Z]{3,4}\z/;
	my $from_windows = windows_time_zones();
	print STDERR "# Windows time zone: $from_windows";
	my $i_dst = (core_time())[-1] ? -1 : 0; # some only have one entry, so two would be the same
	return $from_windows->{$from_posix}[$i_dst] if exists $from_windows->{$from_posix};
	}

sub quarter {
    my $mon = ( core_time() )[4] + 1;

       if( $mon <= 3 ) { 1 }
    elsif( $mon <= 6 ) { 2 }
    elsif( $mon <= 9 ) { 3 }
    else               { 4 }
    }

sub usage {
    die <<"USAGE";
$_[0]."usage: $0".' [-u] [+format]

formats
%% - The character %
%a - Three-letter weekday name
%A - Full weekday name
%b - Three-letter month name
%B - Full month name
%c - locale version of the date-time string
%C - Century (00-99)
%d - Day of month (padded w/ zero)
%D - Date in MM/DD/YY format
%e - Day of month (padded w/ space)
%F - %Y-%m-%d
%g - ISO 8601 year
%G - ISO 8601 year
%h - Three-letter month name
%H - Hour HH
%I - Hour HH (12 hour)
%j - Three-digit Julian day
%k - Hour - space padded
%l - Hour - space padded (12 hour)
%m - Month number 01-12
%M - Minute MM
%n - Newline
%p - AM or PM
%r - Time in HH(12 hour):MM:SS (AM|PM) format
%R - Time in HH:MM format
%s - Absolute seconds (since epoch)
%S - Seconds SS
%t - Tab
%T - Time in HH:MM:SS format.
%u - Day of week, 1=Monday, 7=Sunday.
%U - Two digit week number, start Sunday.
%V - ISO week number, with Monday as the first day of week
%w - Day of week, 0=Sunday, 6=Saturday.
%W - Two digit week number, start Monday.
%x - locale's date representation
%X - locale's time representation
%y - Two-digit year.
%Y - Four-digit year.
%z - Time zone offset in hours.
%Z - Time zone code.
USAGE
}

=encoding utf8

=head1 NAME

date - display or set date and time

=cut

=begin comment

#!perl
use v5.10;

use Mojo::UserAgent;
use Mojo::Util qw(dumper);

my $ua = Mojo::UserAgent->new;
my $url = 'https://ss64.com/nt/timezones.html';

my %hash = Mojo::UserAgent
	->new
	->get( $url )
	->result
	->dom
	->find( 'table#rowhover > tr' )
	->map( sub { ($_->find( 'td' )->map( 'all_text' )->each)[2,4] } )
	->each;

say dumper( \%hash );

=end comment

=cut

# If any of these are wrong, just send the patch

sub windows_time_zones {
	my %hash = (
		"AUS Central Standard Time"               => [ qw( ACST ACDT ) ],
		"AUS Eastern Standard Time"               => [ qw( AEST AEDT ) ],
		"Afghanistan Standard Time"               => [ qw( AFT  AFT  ) ],
		"Alaskan Standard Time"                   => [ qw( AKST AKDT ) ],
		"Arab Standard Time"                      => [ qw( ABST ) ],
		"Arabian Standard Time"                   => [ qw( AST  ADT  ) ],
		"Arabic Standard Time"                    => [ qw( ARST ) ],
		"Argentina Standard Time"                 => [ qw( ART ) ],     #
		"Atlantic Standard Time"                  => [ qw( AST ADT ) ], #
		"Azerbaijan Standard Time"                => [ qw( AZT ) ],     #
		"Azores Standard Time"                    => [ qw( AZOT AZOST) ], #
		"Cabo Verde Standard Time"                => [ qw( CVT ) ],
		"Canada Central Standard Time"            => [ qw( CST CDT ) ], #
		"Caucasus Standard Time"                  => [ qw( AMT ) ],
		"Cen. Australia Standard Time"            => [ qw( ACST ) ],
		"Central America Standard Time"           => [ qw( CST ) ],
		"Central Asia Standard Time"              => [ qw( BTT ) ],
		"Central Europe Standard Time"            => [ qw( CET CEST ) ], #
		"Central European Standard Time"          => [ qw( CET CEST ) ], #
		"Central Pacific Standard Time"           => [ qw( SBT ) ],
		"Central Standard Time"                   => [ qw( CST CDT ) ],
		"Central Standard Time (Mexico)"          => [ qw( CST CDT ) ],
		"China Standard Time"                     => [ qw( CST ) ], #
		"Dateline Standard Time"                  => [ qw( BIT ) ],
		"E. Africa Standard Time"                 => [ qw( EAT ) ],
		"E. Australia Standard Time"              => [ qw( AEST ) ],
		"E. Europe Standard Time"                 => [ qw( EET EEST ) ],
		"E. South America Standard Time"          => [ qw( EST ) ],
		"Eastern Standard Time"                   => [ qw( EST EDT  ) ], #
		"Egypt Standard Time"                     => [ qw( EGY ) ],  #
		"Ekaterinburg Standard Time"              => [ qw( YEKT ) ],
		"FLE Standard Time"                       => [ qw( EET ) ],
		"Fiji Standard Time"                      => [ qw( FJT FJST ) ],
		"Further-Eastern European Time"           => [ qw( FET ) ],
		"GMT Standard Time"                       => [ qw( GMT ) ],
		"GTB Standard Time"                       => [ qw( GTBST ) ],
		"Georgian Standard Time"                  => [ qw( GET ) ],
		"Greenland Standard Time"                 => [ qw( GNST GNDT ) ],
		"Greenwich Standard Time"                 => [ qw( GMT ) ],
		"Hawaiian Standard Time"                  => [ qw( HST ) ], #
		"India Standard Time"                     => [ qw( IST ) ], #
		"Iran Standard Time"                      => [ qw( IRST IRDT ) ], #
		"Israel Standard Time"                    => [ qw( IST IDT   ) ], #
		"Jordan Standard Time"                    => [ qw( AST ) ], #
		"Korea Standard Time"                     => [ qw( KST ) ], #
		"Libya Standard Time"                     => [ qw( CET ) ],
		"Mauritius Standard Time"                 => [ qw( MUT ) ],     #
		"Mexico Standard Time"                    => [ qw( CST CDT ) ], #
		"Mexico Standard Time 2"                  => [ qw( CST CDT ) ], #
		"Mid-Atlantic Standard Time"              => [ qw( GST ) ],
		"Middle East Standard Time"               => [ qw( MEST ) ],
		"Morocco Standard Time"                   => [ qw( MOST ) ],
		"Mountain Standard Time"                  => [ qw( MST MDT ) ], #
		"Mountain Standard Time (Mexico)"         => [ qw( MSTM ) ],
		"Myanmar Standard Time"                   => [ qw( MMT ) ], #
		"N. Central Asia Standard Time"           => [ qw( NCAST ) ],
		"Namibia Standard Time"                   => [ qw( WAT SAST ) ], #
		"Nepal Standard Time"                     => [ qw( NPT ) ], #
		"New Zealand Standard Time"               => [ qw( NZST NZDT ) ], #
		"Newfoundland and Labrador Standard Time" => [ qw( NST NDT ) ],
		"North Asia East Standard Time"           => [ qw( IRKT IRKST ) ],
		"North Asia Standard Time"                => [ qw( KRAT KRAST ) ],
		"Pacific SA Standard Time"                => [ qw( PSAST ) ],
		"Pacific Standard Time"                   => [ qw( PST PDT ) ],
		"Pacific Standard Time (Mexico)"          => [ qw( PST PDT ) ],
		"Pakistan Standard Time"                  => [ qw( PKT ) ], #
		"Romance Standard Time"                   => [ qw( RST ) ],
		"Russian Standard Time"                   => [ qw( MSK MSD ) ],
		"SA Eastern Standard Time"                => [ qw( UYT UYST ) ],
		"SA Pacific Standard Time"                => [ qw( SAPST ) ],
		"SA Western Standard Time"                => [ qw( SAWST ) ],
		"SE Asia Standard Time"                   => [ qw( THA ) ],
		"Samoa Standard Time"                     => [ qw( SMST ) ],
		"Singapore Standard Time"                 => [ qw( SST ) ],
		"South Africa Standard Time"              => [ qw( SAST ) ],
		"Sri Lanka Standard Time"                 => [ qw( SLST ) ],
		"Taipei Standard Time"                    => [ qw( CST ) ],  # ?
		"Tasmania Standard Time"                  => [ qw( AEST AEDT ) ], #
		"Tokyo Standard Time"                     => [ qw( JST  JST ) ], #
		"Tonga Standard Time"                     => [ qw( TOT ) ],
		"Turkey Standard Time"                    => [ qw( EET EEST ) ],
		"U.S. Eastern Standard Time"              => [ qw( EST EDT  ) ], #
		"US Mountain Standard Time"               => [ qw( MST MDT  ) ], #
		"Venezuela Standard Time"                 => [ qw( VET ) ], #
		"Vladivostok Standard Time"               => [ qw( VLAT VLAST) ],
		"W. Australia Standard Time"              => [ qw( AWST AWDT ) ],
		"W. Central Africa Standard Time"         => [ qw( ECT ) ],
		"W. Europe Standard Time"                 => [ qw( WET WEST ) ],
		"West Asia Standard Time"                 => [ qw( WAT WAST ) ],   #
		"West Pacific Standard Time"              => [ qw( WPST WPDT ) ],  #
		"Yakutsk Standard Time"                   => [ qw( YAKT YAKST ) ], #
        );

	  \%hash;
}
